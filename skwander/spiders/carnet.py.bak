# -*- coding: utf-8 -*-
import json
import scrapy
from scrapy.linkextractors import LinkExtractor
from scrapy.spiders import CrawlSpider, Rule
from scrapy.exceptions import DropItem
from scrapy.http import FormRequest, Request

from skwander.items import DesignerItem, ProductItem
from skwander.utils import SkWanderUtil, CountDownLatch


class CarnetSpider(CrawlSpider):
    name = 'carnet'
    allowed_domains = ['carnetdemode.com']
    start_urls = ['http://en.carnetdemode.com/designers']

    rules = (
        # Rule(LinkExtractor(allow='//en\.carnetdemode\.com/designer/.+$'), callback='parse_designer', follow=False),
        # Rule(LinkExtractor(allow='//en\.carnetdemode\.com/designer/antikod\-by\-hapsatousy$'),
        #     callback='parse_designer', follow=False),
        Rule(LinkExtractor(allow='//en\.carnetdemode\.com/designer/lagon\-rouge$'),
             callback='parse_designer', follow=False),
    )

    results_per_page = 30

    def parse_designer(self, response):
        self.logger.info('Hi, this is designer page! %s', response.url)
        designer = DesignerItem()

        uid = SkWanderUtil.get_first(response.xpath('//ul[@class="dropdown-menu"]/li/@data-designer-id').extract())
        name = SkWanderUtil.get_first(response.xpath('//div[@class="designer-info-wrap"]/h1/text()').extract())
        desc_part1 = SkWanderUtil.get_first(response.xpath('//div[@class="designer-info-wrap"]/p/text()').extract())
        desc_part2 = SkWanderUtil.get_first(
            response.xpath('//div[@class="designer-info-wrap"]/p/span/text()').extract())
        desc = desc_part1.strip() if desc_part1 else "" + desc_part2.strip() if desc_part2 else ""
        img_url = SkWanderUtil.get_first(response.xpath('//div[@class="designer-avatar"]/img/@src').extract())
        nation = SkWanderUtil.get_first(response.xpath('//div[@class="designer-avatar"]/div/text()').extract())

        designer['uid'] = uid.strip() if uid else ""
        designer['name'] = name.strip() if name else ""
        designer['url'] = response.url
        designer['desc'] = desc
        designer['img_url'] = img_url.strip() if img_url else ""
        designer['nation'] = nation.strip() if nation else ""
        designer['product_detail_urls'] = []
        designer['products'] = []

        uid = designer['uid']
        if not uid:
            raise DropItem("can't find uid in designer[name=%s] page" % designer['name'])

        products_request = self.make_products_list_request(designer, 0, None, self.parse_products_list)

        # i['domain_id'] = response.xpath('//input[@id="sid"]/@value').extract()
        # i['name'] = response.xpath('//div[@id="name"]').extract()
        # i['description'] = response.xpath('//div[@id="description"]').extract()
        return products_request

    def parse_products_list(self, response):
        designer = response.meta['designer']
        self.logger.info('parse product list response, response status: %d', response.status)
        # self.logger.info('parse product list response, request body: %s', response.request.body)

        data = CarnetSpider.get_data_from_response(response)
        CarnetSpider.add_product_detail_urls(designer, data)

        total_count = int(data['total'])
        if total_count > 0:
            max_page = total_count / self.results_per_page + 1
            latch = CountDownLatch(max_page - 1) if max_page > 1 else None

            for page in range(1, max_page):
                yield self.make_products_list_request(designer, page, latch, self.parse_products_list_next_page)

            # waiting for crawl product detail urls
            if latch:
                latch.await()

            product_detail_urls = designer['product_detail_urls']
            if product_detail_urls:
                latch = CountDownLatch(len(product_detail_urls))
                for detail_url in product_detail_urls:
                    yield self.make_products_detail_request(detail_url, designer, latch)

                latch.await()

        yield designer

    def parse_products_list_next_page(self, response):
        designer = response.meta['designer']
        self.logger.info('parse product list response, response status: %d', response.status)

        data = CarnetSpider.get_data_from_response(response)
        CarnetSpider.add_product_detail_urls(designer, data)

        latch = response.meta['latch']
        if latch:
            latch.count_down()

    @staticmethod
    def get_data_from_response(response):
        designer = response.meta['designer']

        json_resp = json.loads(response.body_as_unicode())
        data = json_resp.get('data')
        if not data:
            raise DropItem("can't find data in designer[name=%s] product list" % designer['name'])
        if not data['total'] or not data['results']:
            raise DropItem("can't find total or results in designer[name=%s] product list" % designer['name'])

        return data

    @staticmethod
    def add_product_detail_urls(designer, data):
        results = data['results']
        urls = ["%s/%s" % (x['design']['URLTag'], x['mainColor']['URLTag']) for x in results]
        designer['product_detail_urls'].extend(urls)

    def err_back(self, f):
        self.logger.error('some error happened, failure: %s, type: %s, value: %s', f, f.type, f.value)

    def make_products_list_request(self, designer, page, latch, callback):
        self.logger.debug('schedule to visit designer product list json api, designer name: %s, page: %d',
                          designer['name'], page)
        return FormRequest(url='http://en.carnetdemode.com/design/list',
                           formdata={'query': '', 'filters[designers][]': designer['uid'], 'filters[is_gift]': '',
                                     'page': str(page), 'sort': '-4', 'resultsPerPage': str(self.results_per_page)},
                           callback=callback,
                           meta={'designer': designer, 'latch': latch},
                           method='POST',
                           errback=self.err_back)

    def make_products_detail_request(self, detail_url, designer, latch):
        self.logger.debug('schedule to visit product detail page, designer name: %s, detail url: %s',
                          designer['name'], detail_url)
        return Request(url='http://en.carnetdemode.com/design/' + detail_url,
                       callback=self.parse_product_detail,
                       meta={'designer': designer, 'latch': latch},
                       method='GET',
                       errback=self.err_back)

    def parse_product_detail(self, response):
        designer = response.meta['designer']
        self.logger.info('parse product detail response, response status: %d', response.status)
        product = ProductItem()

        name = SkWanderUtil.get_first(
            response.xpath('//div[@class="product-info"]/h1[@class="hidden-xs"]/text()').extract())

        product['name'] = name.strip() if name else ""

        designer['products'].append(product)

        response.meta['latch'].count_down()





